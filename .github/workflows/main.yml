name: Deploy Cloudflare Pages & Workers + AWS Lambda

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Cloudflare Secrets
        run: |
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "❌ Error: CLOUDFLARE_API_TOKEN secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "❌ Error: CLOUDFLARE_ACCOUNT_ID secret is not set"
            exit 1
          fi
          echo "✅ Cloudflare secrets are configured"
      
      - name: Check AWS Secrets
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "⚠️ Warning: AWS_ACCESS_KEY_ID secret is not set (needed for cron deployment)"
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "⚠️ Warning: AWS_SECRET_ACCESS_KEY secret is not set (needed for cron deployment)"
          fi
          if [ -z "${{ secrets.AWS_REGION }}" ]; then
            echo "⚠️ Warning: AWS_REGION secret is not set (needed for cron deployment)"
          fi
          if [ -z "${{ secrets.AWS_LAMBDA_FUNCTION_NAME }}" ]; then
            echo "⚠️ Warning: AWS_LAMBDA_FUNCTION_NAME secret is not set (needed for cron deployment)"
          fi
          echo "✅ Secret validation complete"
      
      - name: Verify Cloudflare API Credentials
        run: |
          chmod +x .github/utils/cloudflare.sh
          .github/utils/cloudflare.sh "${{ secrets.CLOUDFLARE_API_TOKEN }}" "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
      
      - name: Verify AWS Lambda Credentials
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ] && [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            chmod +x .github/utils/aws-lambda.sh
            .github/utils/aws-lambda.sh "${{ secrets.AWS_ACCESS_KEY_ID }}" "${{ secrets.AWS_SECRET_ACCESS_KEY }}" "${{ secrets.AWS_REGION }}" "${{ secrets.AWS_LAMBDA_FUNCTION_NAME }}"
          else
            echo "⚠️  AWS credentials not configured - skipping Lambda verification"
          fi

  detect-changes:
    needs: validate-secrets
    runs-on: ubuntu-latest
    outputs:
      site: ${{ steps.filter.outputs.site }}
      app: ${{ steps.filter.outputs.app }}
      api: ${{ steps.filter.outputs.api }}
      auth: ${{ steps.filter.outputs.auth }}
      cron: ${{ steps.filter.outputs.cron }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            site:
              - 'site/**'
            app:
              - 'app/**'
            api:
              - 'api/**'
            auth:
              - 'auth/**'
            cron:
              - 'cron/**'

  deploy-site:
    needs: detect-changes
    if: needs.detect-changes.outputs.site == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: site/package-lock.json
      
      - name: Install dependencies
        working-directory: ./site
        run: rm -rf node_modules && npm install && npm ci
      
      - name: Build Docusaurus site
        working-directory: ./site
        run: npm run build
      
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ./build --project-name=site
          workingDirectory: ./site

  deploy-app:
    needs: detect-changes
    if: needs.detect-changes.outputs.app == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
      
      - name: Install dependencies
        working-directory: ./app
        run: rm -rf node_modules && npm install && npm ci
      
      - name: Build React app
        working-directory: ./app
        run: npm run build
      
      - name: Check build output
        working-directory: ./app
        run: |
          echo "Checking for build directories..."
          if [ -d "dist" ]; then
            echo "✅ Found dist directory"
            BUILD_DIR="dist"
          elif [ -d "build" ]; then
            echo "✅ Found build directory"
            BUILD_DIR="build"
          else
            echo "❌ No build output found"
            ls -la
            exit 1
          fi
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
      
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ./${{ env.BUILD_DIR }} --project-name=app
          workingDirectory: ./app

  deploy-api:
    needs: detect-changes
    if: needs.detect-changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json
      
      - name: Install dependencies
        working-directory: ./api
        run: rm -rf node_modules && npm install && npm ci
      
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          workingDirectory: ./api

  deploy-auth:
    needs: detect-changes
    if: needs.detect-changes.outputs.auth == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: auth/package-lock.json
      
      - name: Install dependencies
        working-directory: ./auth
        run: rm -rf node_modules && npm install && npm ci
      
      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          workingDirectory: ./auth

  deploy-cron:
    needs: detect-changes
    if: needs.detect-changes.outputs.cron == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: cron/requirements.txt
      
      - name: Install dependencies
        working-directory: ./cron
        run: |
          rm -rf ./package
          mkdir -p ./package
          python -m pip install --upgrade pip
          pip install -r requirements.txt -t ./package
          cp -r src ./package/
          cp -r alembic ./package/ 2>/dev/null || true
          cp alembic.ini ./package/ 2>/dev/null || true
      
      - name: Create deployment package
        working-directory: ./cron/package
        run: |
          zip -r ../deployment-package.zip .
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to AWS Lambda
        working-directory: ./cron
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://deployment-package.zip