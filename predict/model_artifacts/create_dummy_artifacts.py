# model_artifacts/create_dummy_artifacts.py
import pandas as pd
import lightgbm as lgb
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OrdinalEncoder
from sklearn.compose import ColumnTransformer
import joblib

print("--- B·∫Øt ƒë·∫ßu t·∫°o c√°c model artifacts gi·∫£ l·∫≠p ƒë·ªÉ test API ---")

# --- 1. T·∫°o d·ªØ li·ªáu gi·∫£ c·ª±c nh·ªè ---
dummy_data = {
    'size': [100.0],
    'living_size': [80.0],
    'width': [5.0],
    'length': [20.0],
    'rooms': [3.0],
    'toilets': [2.0],
    'floors': [2.0],
    'longitude': [105.8],
    'latitude': [21.0],
    'category': ['Nh√† ri√™ng'],
    'region': ['H√† N·ªôi'],
    'area': ['Qu·∫≠n Ba ƒê√¨nh'],
    'price': [5000000000] # 5 t·ª∑
}
df_dummy = pd.DataFrame(dummy_data)

X = df_dummy.drop('price', axis=1)
y = df_dummy['price']

# --- 2. T·∫°o Preprocessor gi·∫£ ---
# C·∫•u tr√∫c ph·∫£i y h·ªát nh∆∞ trong script training th·∫≠t
numerical_features = ['size', 'living_size', 'width', 'length', 'rooms', 'toilets', 'floors', 'longitude', 'latitude']
categorical_features = ['category', 'region', 'area']

numerical_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='median'))])
categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('encoder', OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, numerical_features),
        ('cat', categorical_transformer, categorical_features)
    ],
    remainder='passthrough'
)

# Fit preprocessor v·ªõi d·ªØ li·ªáu gi·∫£
preprocessor.fit(X)

# L∆∞u preprocessor
PREPROCESSOR_PATH = 'preprocessor.pkl'
joblib.dump(preprocessor, PREPROCESSOR_PATH)
print(f"‚úÖ ƒê√£ t·∫°o v√† l∆∞u preprocessor gi·∫£ t·∫°i: {PREPROCESSOR_PATH}")


# --- 3. T·∫°o Model LightGBM gi·∫£ ---
# √Åp d·ª•ng preprocessor ƒë·ªÉ c√≥ d·ªØ li·ªáu cho training
X_processed = preprocessor.transform(X)

# T·∫°o v√† train m·ªôt model c·ª±c k·ª≥ ƒë∆°n gi·∫£n
params = { 'objective': 'regression', 'metric': 'l1', 'verbose': -1 }
dummy_model = lgb.train(
    params,
    lgb.Dataset(X_processed, label=y),
    num_boost_round=1 # Ch·ªâ train 1 v√≤ng l·∫∑p l√† ƒë·ªß
)

# L∆∞u model
MODEL_PATH = 'lightgbm_model.txt'
dummy_model.save_model(MODEL_PATH)
print(f"‚úÖ ƒê√£ t·∫°o v√† l∆∞u model LightGBM gi·∫£ t·∫°i: {MODEL_PATH}")

print("\nüéâ Ho√†n th√†nh! Gi·ªù b·∫°n c√≥ th·ªÉ kh·ªüi ch·∫°y server FastAPI ƒë·ªÉ test.")